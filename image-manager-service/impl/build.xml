<project name="image-manager-service 1.0.0 Implementation" basedir="." default="deploy" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property environment="env"/>

    <condition property="ivy.log.level" value="default" else="quiet">
        <isset property="ivy.log.enabled" />
    </condition>

    <!-- The final name of the distributable -->
    <property name="dist.name" value="image-manager-service-impl"/>

    <property name="src.root.dir" value="${basedir}/src"/>
    <property name="src.main.java.dir" value="${src.root.dir}/main/java"/>
    <property name="src.main.resources.dir" value="${src.root.dir}/main/resources"/>
    <property name="src.main.lib.dir" value="${basedir}/lib/main"/>
    <property name="src.test.java.dir" value="${src.root.dir}/test/java"/>
    <property name="src.test.resources.dir" value="${src.root.dir}/test/resources"/>
    <property name="src.test.lib.dir" value="${basedir}/lib/test"/>

    <property name="target.dir" value="${basedir}/target"/>
    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.test.classes.dir" value="${target.dir}/test-classes"/>

    <property name="dist.dir" value="${basedir}/dist"/>

    <echo message = "Ivy Home is ${env.IVY_HOME}" />
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
        <classpath>
            <fileset dir="${env.IVY_HOME}">
                <include name="*.jar"/>
            </fileset>
        </classpath>
    </taskdef>
    <!-- Load ivysettings.xml -->
    <ivy:settings file="../ivysettings.xml" />

    <!-- Clean the generated content -->
    <target name="clean">
        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Setup the necessary directories and other initialization -->
    <target name="init">
        <mkdir dir="${target.dir}"/>
    </target>

    <ivy:cachepath pathid="compile.classpath" conf="compile" log="${ivy.log.level}"/>
    <ivy:cachepath pathid="test.dependencies" conf="test" log="${ivy.log.level}"/>

    <!-- Test source compilation classpath -->
    <path id="test.classpath">
        <!-- Make the compiled source available to tests -->
        <pathelement path="${target.classes.dir}"/>
        <!-- Use the main compile time libraries for tests too -->
        <path refid="compile.classpath"/>
        <!-- Test specific libraries -->
        <path refid="test.dependencies"/>
    </path>

    <!-- Compile the main source -->
    <target name="compile" depends="init" description="Compiles the main source">
        <mkdir dir="${target.classes.dir}"/>
        <javac memoryMaximumSize="256m" srcdir="${src.main.java.dir}" destdir="${target.classes.dir}" fork="yes" source="1.8" debug="true" debuglevel="lines,vars,source">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>
        <!-- Copy the main resources to the target dir-->
        <antcall target="copy-resources"/>
    </target>

    <target name="copy-resources">
        <mkdir dir="${target.classes.dir}"/>
        <copy todir="${target.classes.dir}">
            <fileset dir="${src.main.resources.dir}"/>
        </copy>
    </target>

    <target name="check-tests-exist">
        <available file="${src.test.java.dir}" property="tests.exist"/>
    </target>

    <target name="test-compile" depends="compile, check-tests-exist" description="Compiles the test source" if="${tests.exist}">
        <mkdir dir="${target.test.classes.dir}"/>
        <javac memoryMaximumSize="256m" srcdir="${src.test.java.dir}" destdir="${target.test.classes.dir}" fork="yes" source="1.8" debug="true" debuglevel="lines,vars,source">
            <classpath refid="test.classpath"/>
        </javac>
        <!-- Copy the test resources to the target dir-->
        <antcall target="copy-test-resources"/>
    </target>

    <target name="copy-test-resources" depends="check-tests-exist" if="${tests.exist}">
        <mkdir dir="${target.test.classes.dir}"/>
        <copy todir="${target.test.classes.dir}" failonerror="false">
            <fileset dir="${src.test.resources.dir}"/>
        </copy>
    </target>

    <taskdef resource="testngtasks">
        <classpath>
            <path refid="test.dependencies"/>
        </classpath>
    </taskdef>

    <!-- This target is created to be able to independently run tests (without having them executed as a part of creating a dist) -->
    <target name="run-tests" depends="test-compile, check-tests-exist" description="Runs the TestNG unit tests" if="${tests.exist}">
        <property name="test.reports.dir" value="${target.dir}/reports"/>
        <mkdir dir="${test.reports.dir}"/>
        <testng outputDir="${test.reports.dir}" haltOnFailure="true" verbose="2">
            <classpath>
                <path refid="test.dependencies"/>
                <pathelement location="${target.classes.dir}"/>
                <pathelement location="${target.test.classes.dir}"/>
            </classpath>
            <classfileset dir="${target.test.classes.dir}" includes="**/*.class"/>
        </testng>
    </target>

    <!-- Runs tests prior to creating a dist -->
    <target name="test" depends="test-compile" description="Runs the unit tests">
        <!-- TODO: Implement this -->
    </target>

    <target name="package" depends="test" description="Generates the final package for the project">
        <jar file="${dist.dir}/${dist.name}.jar">
            <fileset dir="${target.classes.dir}"/>
        </jar>
    </target>

    <target name="dist" depends="package" description="Generates the binary distribution of this project">
        <mkdir dir="${dist.dir}/${dist.name}" />
        <!-- Get the service runtime distribution -->
        <ivy:retrieve pattern="${dist.dir}/[artifact](-[classifier]).[ext]" conf="service-runtime-dist" overwritemode="always" log="${ivy.log.level}"/>
        <!-- Untar the service runtime distribution -->
        <untar compression="gzip" src="${dist.dir}/macaw-service-runtime.tar.gz" dest="${dist.dir}/${dist.name}"/>
        <!-- replace the "program-name" placeholder value in the startup scripts -->
        <replace dir="${dist.dir}/${dist.name}/bin" casesensitive="false" token="@program-name@" value="image-manager-service-impl">
            <include name="startup.sh"/>
            <include name="startup.bat"/>
        </replace>

        <!-- Make sure the .sh have the correct permissions -->
        <chmod perm="755">
            <fileset dir="${dist.dir}/${dist.name}/bin">
                <include name="**/*.sh"/>
            </fileset>
        </chmod>

        <!-- Copy over the service specific artifacts and dependencies to a relevant sub-directory in the services folder -->
        <property name="services-root-dir" value="${dist.dir}/${dist.name}/services"/>
        <copy todir="${services-root-dir}/${dist.name}">
            <fileset dir="${src.main.resources.dir}"/>
        </copy>

        <!-- The service's jar itself goes into the lib folder of the service -->
        <copy todir="${services-root-dir}/${dist.name}/lib">
            <!-- Copy over the compiled jar of this project to the lib folder of the distribution -->
            <fileset dir="${dist.dir}" includes="${dist.name}.jar" />
        </copy>
        <!-- service specific dependencies go into the lib folder of the service. -->
        <ivy:retrieve pattern="${services-root-dir}/${dist.name}/lib/[artifact](-[classifier])-[revision].[ext]" conf="packaged" overwritemode="always"/>
        <!-- Get rid of any Macaw runtime jars that might have been inadvertently pulled in via dependencies
            into the service-name/lib folder -->
        <delete>
            <fileset dir="${services-root-dir}/${dist.name}/lib/">
                <include name="macaw-service-common.jar"/>
                <include name="macaw-service-framework.jar"/>
                <include name="macaw-service-client.jar"/>
            </fileset>
        </delete>

        <!-- Remove the base service runtime distribution binary from which we constructed this service specific binary -->
        <delete file="${dist.dir}/macaw-service-runtime.tar.gz"/>

    </target>

    <target name="tar" depends="dist">
        <tar destfile="${dist.dir}/${dist.name}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}/${dist.name}">
                <exclude name="bin/**/*.sh"/>
            </tarfileset>
            <tarfileset dir="${dist.dir}/${dist.name}/bin" filemode="755" prefix="bin">
                <include name="**/*.sh"/>
            </tarfileset>
        </tar>
    </target>

    <target name="makepom" description="Generate POM">
        <!-- Generate the Maven POM -->
        <ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${dist.dir}/${dist.name}.pom">
            <ivy:mapping conf="compile" scope="compile"/>
            <ivy:mapping conf="test" scope="test"/>
            <ivy:mapping conf="runtime" scope="runtime"/>
        </ivy:makepom>
    </target>

    <target name="deploy" depends="tar, makepom" description="Deploy locally the snapshots">
        <ivy:publish resolver="local" publishivy="true" overwrite="true">
            <artifacts pattern="${dist.dir}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

</project>

